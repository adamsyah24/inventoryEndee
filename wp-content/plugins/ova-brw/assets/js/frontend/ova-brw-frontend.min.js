!function(M){"use strict";var D={init:function(){this.brw_datepicker(),this.submit_button(),this.ova_collapsed(),this.ova_load_name_product(),this.ova_load_tag_product(),this.ova_field_search_changed(),this.ova_get_time_to_book_start(),this.ova_get_time_to_book_end(),this.ova_change_pickup_location_transport(),this.ova_change_pick_up_off_other_location(),this.ova_startdate_perido_time(),this.ova_ajax_load_packages(),this.ova_ajax_show_total(),this.ova_ajax_show_total_after_load(),this.ova_search_map(),this.ova_taxi_location(),this.ova_slide_image(),this.ova_modern_product()},ova_change_pickup_location_transport:function(){M(".ovabrw-form").on("change",'select[name="ovabrw_pickup_loc"].ovabrw-transport ',function(){M(this).closest(".ovabrw-form").find('select[name="ovabrw_pickoff_loc"]').empty();var a=M(this).val(),a=M(this).find('option[value="'+a+'"]').data("item_loc"),e="",e=a?(a.forEach(function(a){a&&(e+='<option value="'+a+'" >'+a+"</option>")}),e||'<option value="">Select Location</option>'):'<option value="">Select Location</option>';M(this).closest(".ovabrw-form").find('select[name="ovabrw_pickoff_loc"]').append(e)})},ova_change_pick_up_off_other_location:function(){M(".ovabrw-form").on("change",'select[name="ovabrw_pickup_loc"] ',function(){var a=M(this).val(),e=M(this).find("option:selected").text();"other_location"===a?M(this).closest(".rental_item").find(".ovabrw-other-location").append('<input style="margin-top: 10px;" name="ovabrw_pickup_loc" type="text" placeholder="'+e+'">'):M(this).closest(".rental_item").find(".ovabrw-other-location").empty()}),M(".ovabrw-form").on("change",'select[name="ovabrw_pickoff_loc"] ',function(){var a=M(this).val(),e=M(this).find("option:selected").text();"other_location"===a?M(this).closest(".rental_item").find(".ovabrw-other-location").append('<input style="margin-top: 10px;" name="ovabrw_pickoff_loc" type="text" placeholder="'+e+'">'):M(this).closest(".rental_item").find(".ovabrw-other-location").empty()})},ova_get_time_to_book_start:function(a){var e=[];return"undefined"!=typeof brw_time_to_book_general_calendar&&(e=brw_time_to_book_general_calendar.replace(/ /g,"").split(",")),void 0===a?e:"no"==a?[]:a.replace(/ /g,"").split(",")},ova_get_time_to_book_end:function(a){var e=[];return"undefined"!=typeof brw_time_to_book_general_calendar_endate&&(e=brw_time_to_book_general_calendar_endate.replace(/ /g,"").split(",")),void 0===a?e:"no"==a?[]:a.replace(/ /g,"").split(",")},ova_field_search_changed:function(){var a,e;M('.ovabrw_search select[name="ovabrw_attribute"]').on("change",function(){M(this).closest(".wrap_content").children(".s_field.ovabrw-value-attribute").css("display","none");var a=M(this).val();a&&M(this).closest(".wrap_content").children(".s_field#"+a).css("display","inline-block")}),M('.ovabrw_search select[name="cat"]').on("change",function(){u(M(this).closest("form"),M(this).val())}),M(".ovabrw_search").length&&u(M(".ovabrw_search"),""),M('.ovabrw_search select[name="cat"]').length&&(a=M("form.ovabrw_search"),(e=M('form.ovabrw_search select[name="cat"]').val())&&u(a,e))},ova_load_name_product:function(){M('.ovabrw_wd_search input[name="ovabrw_name_product"]').autocomplete({source:function(a,e){M.ajax({url:ajax_object.ajax_url,type:"POST",dataType:"json",data:{action:"ovabrw_load_name_product",keyword:a.term},success:function(a){e(a)}})},delay:0})},ova_load_tag_product:function(){M('.ovabrw_wd_search input[name="ovabrw_tag_product"]').autocomplete({source:function(a,e){M.ajax({url:ajax_object.ajax_url,type:"POST",dataType:"json",data:{action:"ovabrw_load_tag_product",keyword:a.term},success:function(a){e(a)}})},delay:0})},brw_datepicker:function(){var r=M(".ovabrw_datetimepicker").data("firstday");"undefined"!=typeof brw_lang_general_calendar&&M.datetimepicker.setLocale(brw_lang_general_calendar);var l="";"undefined"!=typeof brw_disable_week_day&&(l=brw_disable_week_day.split(",").map(function(a){return parseInt(a,10)}));var n="";"undefined"!=typeof brw_time_to_book_general_calendar&&(n=brw_time_to_book_general_calendar.replace(/ /g,"").split(","));var s=30;"undefined"!=typeof brw_data_step&&(s=brw_data_step);var i="";"undefined"!=typeof brw_format_time&&(i=brw_format_time);var c="";switch(c="undefined"!=typeof brw_date_format?brw_date_format:c){case"d-m-Y":c="DD-MM-Y";break;case"m/d/Y":c="MM/DD/Y";break;case"Y/m/d":c="Y/MM/DD";break;case"Y-m-d":c="Y-MM-DD";break;default:c="DD-MM-Y"}var d=new Date;M.datetimepicker.setDateFormatter({parseDate:function(a,e){e=moment(a,e);return!!e.isValid()&&e.toDate()},formatDate:function(a,e){return moment(a).format(e)}}),M(window).width()<=1024&&M(".ovabrw_datetimepicker").datetimepicker({closeOnTimeSelect:!1}),M(".ovabrw_datetimepicker").each(function(){var t=[],a=[],e=M(this).attr("order_time"),o=M(this).data("disable-week-day");(o="0"==o?"0,":o)&&(l=o.toString().split(",").map(function(a){return parseInt(a,10)})),(a=e?JSON.parse(e):a).forEach(function(a,e){a.hasOwnProperty("rendering")&&a.start_v2&&t.push(a.start_v2)});o="true"==(o=M(this).attr("timepicker")),e=M(this).attr("default_hour"),a={scrollInput:!1,dayOfWeekStart:r,minDate:d,disabledWeekDays:l,format:c+" "+i,formatDate:c,formatTime:i,step:s,allowTimes:n,timepicker:!0,autoclose:!0,disabledDates:t,defaultTime:e};!M(this).hasClass("no_time_picker")&&0!=o||(a={scrollInput:!1,dayOfWeekStart:r,minDate:d,disabledWeekDays:l,format:c,formatDate:c,formatTime:i,step:s,allowTimes:n,timepicker:!1,autoclose:!0,disabledDates:t,defaultTime:e}),M(this).datetimepicker(a)}),M(".ovabrw_datetimepicker.ovabrw_start_date").on("click",function(){var t=M(this).closest(".ovabrw-form").find(".ovabrw_timepicker"),o=[],a=[],e=M(this).attr("order_time"),n=M(this).data("disable-week-day");(n="0"==n?"0,":n)&&(l=n.toString().split(",").map(function(a){return parseInt(a,10)})),(a=e?JSON.parse(e):a).forEach(function(a,e){a.hasOwnProperty("rendering")&&a.start_v2&&o.push(a.start_v2)});var i=M(this).attr("default_hour"),n="";"undefined"!=typeof brw_format_time&&(n=brw_format_time);e="true"==(e=M(this).attr("timepicker")),a=M(this).attr("time_to_book"),a=D.ova_get_time_to_book_start(a),i={dayOfWeekStart:r,minDate:d,disabledWeekDays:l,autoclose:!0,step:s,format:c+" "+n,formatDate:c,formatTime:n,defaultTime:i,allowTimes:a,timepicker:e,disabledDates:o};!M(this).hasClass("no_time_picker")&&0!=a.length&&0!=e||(i={dayOfWeekStart:r,minDate:d,disabledWeekDays:l,autoclose:!0,step:s,format:c,formatDate:c,defaultTime:!1,allowTimes:a,timepicker:!1,disabledDates:o,onSelectDate:function(a,e){0<t.length&&(t.val(""),t.focus())}}),M(this).datetimepicker(i)}),M(".ovabrw_datetimepicker.ovabrw_end_date").on("click",function(){var t=[],a=[],e=M(this).attr("order_time"),o=M(this).data("disable-week-day");(o="0"==o?"0,":o)&&(l=o.toString().split(",").map(function(a){return parseInt(a,10)})),(a=e?JSON.parse(e):a).forEach(function(a,e){a.hasOwnProperty("rendering")&&a.start_v2&&t.push(a.start_v2)});var n="true"==(n=M(this).attr("timepicker")),i="";"undefined"!=typeof brw_format_time&&(i=brw_format_time);o=M(this).attr("time_to_book"),e=D.ova_get_time_to_book_end(o),a=M(this).attr("default_hour");!M(this).hasClass("no_time_picker")&&0!=e.length&&0!=n||(i="",a=n=!1);o=(o=M(this).closest("form").find(".ovabrw_start_date").val())||M(".ovabrw_start_date.ovabrw_datetimepicker").val(),a={dayOfWeekStart:r,disabledWeekDays:l,autoclose:!0,step:s,minDate:o||!1,format:c+" "+i,formatDate:c,formatTime:i,defaultTime:a,allowTimes:e,timepicker:n,disabledDates:t};!M(this).hasClass("no_time_picker")&&0!=e.length&&0!=n||(a={dayOfWeekStart:r,disabledWeekDays:l,autoclose:!0,step:s,minDate:o||!1,format:c,formatDate:c,defaultTime:!1,allowTimes:e,timepicker:!1,disabledDates:t}),M(this).datetimepicker(a)}),M(".ovabrw_datetimepicker.date_picker_period").each(function(){M(this).data("hour_default"),M(this).data("time_step");var a={dayOfWeekStart:r,minDate:d,format:c,timepicker:!1};M(this).datetimepicker(a)}),M(".ovabrw_datetimepicker.no_time_picker").each(function(){M(this).datetimepicker({timepicker:!1})}),M(".ovabrw_timepicker").each(function(){var t=M(this).closest(".ovabrw-form").find('input[name="ovabrw_pickup_loc"]'),a=M(this).attr("default_hour"),a={datepicker:!1,scrollInput:!1,format:i,formatTime:i,step:s,allowTimes:n,timepicker:!0,autoclose:!0,defaultTime:a,onSelectTime:function(a,e){0<t.length&&t.focus()}};M(this).datetimepicker(a)})},submit_button:function(){M(".ovabrw_btn_submit").on("click",function(a){var e=M(this).closest(".ovabrw_search").data("mesg_required"),t=!0;if(M(this).closest(".ovabrw_search").find(".content .wrap-error").empty(),M(this).closest(".form_ovabrw").find(".required").each(function(){M(this).val()||(t=!1,M(this).parent(".content").children(".wrap-error").append('<p class="error">'+e+"</p>"))}),!t)return a.preventDefault(),!1}),M("form#booking_form button.submit").on("click",function(a){var e=!0,t=M(this).closest("form#booking_form").find('input[name="ovabrw_rental_type"]').val();M(this).closest("form#booking_form").find(".error_item").css("display","none"),M(this).closest("form#booking_form").find(".required").each(function(){M(this).val()||(e=!1,M(this).closest(".rental_item").find(".error_item").css("display","block"),0<M(this).parent(".period_package").length&&M(this).parent(".period_package").parent(".rental_item").children(".error_item").css("display","block")),"checkbox"==M(this).attr("type")&&(M(this).closest(".rental_item").find("input:checked").val()||(e=!1,M(this).closest(".rental_item").find(".error_item").css("display","block"))),"taxi"==t&&("ovabrw_pickup_loc"==M(this).attr("name")&&(M(this).closest(".rental_item").find('input[name="ovabrw_origin"]').val()||(e=!1,M(this).val(""),M(this).closest(".rental_item").find(".error_item").css("display","block"))),"ovabrw_pickoff_loc"==M(this).attr("name")&&(M(this).closest(".rental_item").find('input[name="ovabrw_destination"]').val()||(e=!1,M(this).val(""),M(this).closest(".rental_item").find(".error_item").css("display","block"))))}),e||a.preventDefault()}),M("form#request_booking button.submit").on("click",function(a){var e=!0;M(this).closest("form#request_booking").find(".error_item").css("display","none"),M(this).closest("form#request_booking").find(".required").each(function(){M(this).val()||(e=!1,M(this).closest(".rental_item").children(".error_item").css("display","block"),0<M(this).parent(".period_package").length&&M(this).parent(".period_package").parent(".rental_item").children(".error_item").css("display","block")),"checkbox"==M(this).attr("type")&&(M(this).closest(".rental_item").find("input:checked").val()||(e=!1,M(this).closest(".rental_item").find(".error_item").css("display","block")))}),e||a.preventDefault()}),M('.ovabrw-file input[type="file"]').each(function(){M(this).on("change",function(a){a.preventDefault();var e=M(this),t=e.data("max-file-size"),o=e.data("max-file-size-msg"),n=e.data("formats"),i=e.data("file-mimes"),r=[];"object"==typeof i&&M.each(i,function(a,e){r.push(e)}),e.closest(".ovabrw-file").find(".ovabrw-file-name").html("");var l=this.files[0].name,a=this.files[0].size,i=this.files[0].type;l&&a&&i&&(e.closest(".ovabrw-file").find(".ovabrw-file-name").html(l),t<(a/1048576).toFixed(2)&&e.closest(".ovabrw-file").find(".ovabrw-file-name").html(o),-1==M.inArray(i,r)&&e.closest(".ovabrw-file").find(".ovabrw-file-name").html(n))})}),M('.ovabrw-modern-file input[type="file"]').each(function(){M(this).on("change",function(a){a.preventDefault();var e,t=M(this),o=t.data("max-file-size"),n=t.data("max-file-size-msg"),i=t.data("formats"),r=t.data("file-mimes"),l=[];"object"==typeof r&&M.each(r,function(a,e){l.push(e)}),t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .name").html("").hide(),t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .placeholder").show(),this.files[0]?(e=this.files[0].name,a=this.files[0].size,r=this.files[0].type,e&&a&&r&&(t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .placeholder").hide(),t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .name").html(e).css("display","block"),o<(a/1048576).toFixed(2)&&t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .name").html(n),-1==M.inArray(r,l)&&t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .name").html(i))):(t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .name").html("").hide(),t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .placeholder").show(),M(this).val(""))})}),M('.ovabrw-modern-deposit input[name="ova_type_deposit"]').on("change",function(){var a=M(this).closest(".ovabrw-modern-deposit").find('input[name="ova_type_deposit"]:checked').val();"full"==a&&(M(this).closest(".ovabrw-modern-deposit").find(".deposit-label").removeClass("active"),M(this).closest(".ovabrw-modern-deposit").find(".deposit-label.pay-full").addClass("active")),"deposit"==a&&(M(this).closest(".ovabrw-modern-deposit").find(".deposit-label").removeClass("active"),M(this).closest(".ovabrw-modern-deposit").find(".deposit-label.pay-deposit").addClass("active"))})},ova_collapsed:function(){M(".ovabrw-according").off().on("click",function(a){a.preventDefault(),M(this).siblings(".ovabrw_collapse_content").slideToggle()}),M(".ovabrw_open_popup").off().on("click",function(a){a.preventDefault(),M(this).siblings(".popup").css("display","block")}),M(".popup-close").on("click",function(a){a.preventDefault(),M(this).parent(".popup-inner").parent(".popup").css("display","none")}),M(".popup-close-2").on("click",function(a){a.preventDefault(),M(this).parent(".close_discount").parent(".popup-inner").parent(".popup").css("display","none")})},ova_startdate_perido_time:function(){M(".ovabrw_datetimepicker.startdate_perido_time").focus(function(a){M(this).blur()}),M("body").on("change",".startdate_perido_time",function(){var a=M(this);a.val()&&(a.closest("form").find(".show_ajax_content").removeClass("active"),a.closest("form").find(".show_total").html(""),D.ova_ajax_load_packages(a))})},ova_ajax_load_packages:function(e=null){var a,t;null!=e&&(a=e.val(),t=e.data("pid"),e.closest("form").find('select[name="ovabrw_period_package_id"]').attr("disabled","disabled"),M.ajax({url:ajax_object.ajax_url,type:"POST",data:{action:"ovabrw_get_package_by_time",startdate:a,post_id:t},success:function(a){e.closest("form").find('select[name="ovabrw_period_package_id"] option ').remove();var t="",a=M.parseJSON(a);a&&M.each(a,function(a,e){t+='<option value="'+a+'">'+e+"</option>"}),t&&e.closest("form").find('select[name="ovabrw_period_package_id"] ').append(t),e.closest("form").find('select[name="ovabrw_period_package_id"] ').hasClass("select2-hidden-accessible")&&e.closest("form").find('select[name="ovabrw_period_package_id"] ').select2(),e.closest("form").find('select[name="ovabrw_period_package_id"] ').prop("disabled",!1),e.closest("form").find(".show_ajax_content").removeClass("active"),e.closest("form").find(".show_total").html("")}}))},ova_ajax_show_total:function(){M("body").on("change","form#booking_form",function(){M(this).find('input[name="ovabrw_pickup_date"]').val()&&D.ova_ajax_show_total_after_load(M(this))}),M("form#booking_form").each(function(){var a,e,t=M(this);0!=t.data("run_ajax")&&(a=t.find('input[name="ovabrw_pickup_date"]').val(),e=t.find('input[name="ovabrw_pickoff_date"]').val(),a&&e&&D.ova_ajax_show_total_after_load(t))})},ova_ajax_show_total_after_load:function(t=null){var a,e,o,n,i,r,l,s,c,d,_,p,m,u,f,h,v=[],b=[],w={};null!=t&&((f=t).find(".ajax_loading").addClass("active"),f.find('input[name="car_id"]').val()&&(r=f.find('input[name="car_id"]').val()),f.find('select[name="ovabrw_pickup_loc"]').val()&&(a=f.find('select[name="ovabrw_pickup_loc"]').val()),f.find('select[name="ovabrw_pickoff_loc"]').val()&&(e=f.find('select[name="ovabrw_pickoff_loc"]').val()),f.find('input[name="ovabrw_pickup_date"]').val()&&(o=f.find('input[name="ovabrw_pickup_date"]').val()),f.find('input[name="ovabrw_pickoff_date"]').val()&&(n=f.find('input[name="ovabrw_pickoff_date"]').val()),f.find('select[name="ovabrw_period_package_id"]').val()&&(l=f.find('select[name="ovabrw_period_package_id"]').val()),f.find('input[name="ovabrw_number_vehicle"]').val()&&(i=f.find('input[name="ovabrw_number_vehicle"]').val()),f.find('input[name="ova_type_deposit"]:checked').val()&&(s=f.find('input[name="ova_type_deposit"]:checked').val()),f.find('input[name="ovabrw-duration-map"]').val()&&(_=f.find('input[name="ovabrw-duration-map"]').val()),f.find('input[name="ovabrw-duration"]').val()&&(p=f.find('input[name="ovabrw-duration"]').val()),f.find('input[name="ovabrw-distance"]').val()&&(m=f.find('input[name="ovabrw-distance"]').val()),f.find('input[name="ovabrw_pickup_time"]').val()&&(d=f.find('input[name="ovabrw_pickup_time"]').val()),f.find('select[name="ovabrw_extra_time"]').val()&&(u=f.find('select[name="ovabrw_extra_time"]').val()),!f.find('input[name="data_custom_ckf"]')||(h=f.find('input[name="data_custom_ckf"]').data("ckf"))&&M.each(h,function(a,e){var t;"radio"==e.type&&(w[a]=f.find('input[name="'+a+'"]:checked').val()),"checkbox"==e.type&&(t=[],f.find(".ovabrw-checkbox input[type=checkbox]:checked").each(function(){t.push(M(this).val())}),w[a]=t),"select"==e.type&&(w[a]=f.find('select[name="'+a+'"]').val())}),f.find(".ovabrw_resource input[type=checkbox]:checked").each(function(){v[M(this).data("resource_key")]=M(this).val()}),c=M.extend({},v),f.find("select[name='ovabrw_service[]']").each(function(){M(this).val()&&b.push(M(this).val())}),h=M.extend({},b),M.ajax({url:ajax_object.ajax_url,type:"POST",data:{action:"ovabrw_calculate_total",pickup_loc:a,dropoff_loc:e,pickup_date:o,package_id:l,dropoff_date:n,quantity:i,deposit:s,resources:JSON.stringify(c),services:JSON.stringify(h),custom_ckf:JSON.stringify(w),id:r,duration_map:_,duration:p,distance:m,pickup_time:d,extra_time:u},success:function(a){var e=JSON.parse(a);0!=a?(t.find(".show_ajax_content").addClass("active"),t.find(".show_total").html("").append(e.line_total),e.error?(t.find(".show_ajax_content").removeClass("active"),t.find(".show_total").html(""),t.find(".ajax-show-error").html("").append(e.error).show()):(0<e.number_vehicle_available?(t.find(".show_availables_vehicle").html("").append(e.number_vehicle_available),t.find('input[name="ovabrw_number_vehicle"]').attr("max",e.number_vehicle_available)):(t.find(".show_availables_vehicle").html("").append(0),t.find('input[name="ovabrw_number_vehicle"]').attr("max",1)),t.find(".ajax-show-error").html("").hide())):(t.find(".show_ajax_content").removeClass("active"),t.find(".show_total").html(""),t.find(".ajax-show-error").html("").hide()),f.find(".ajax_loading").removeClass("active")}}))},ova_search_map:function(){var o=parseInt(M(document).find(".wrap_search_map .wrap_search .search_result").attr("data-zoom")),t=M(document).find(".wrap_search_map .wrap_search .search_result").attr("data-default-location"),n=parseFloat(M(document).find(".wrap_search_map .wrap_search .search_result").attr("data-lat")),i=parseFloat(M(document).find(".wrap_search_map .wrap_search .search_result").attr("data-lng")),v=M(document).find(".wrap_search_map .wrap_search .search_result").attr("data-marker_option"),b=M(document).find(".wrap_search_map .wrap_search .search_result").attr("data-marker_icon");function k(){var u,a=[],e=[];M(document).find(".data_product").each(function(){a.push(JSON.parse(JSON.stringify({title:M(this).attr("data-title_product"),link:M(this).attr("data-link_product"),price:M(this).attr("data-html_price"),average_rating:M(this).attr("data-average_rating"),number_comment:M(this).attr("data-number_comment"),thumbnail:M(this).attr("data-thumbnail_product"),lat:M(this).attr("data-map_lat_product"),lng:M(this).attr("data-map_lng_product")}))),e.push(JSON.parse(JSON.stringify({lat:parseFloat(M(this).attr("data-map_lat_product")),lng:parseFloat(M(this).attr("data-map_lng_product"))})))}),u="yes"===t?new google.maps.Map(document.getElementById("show_map"),{center:{lat:parseFloat(n),lng:parseFloat(i)},zoom:o,gestureHandling:"cooperative"}):(e=function(e){if(1==e.length)return e[0];var a=e.length;let t=0,o=0,n=0;for(let a=0;a<e.length;a++){var i=e[a].lat*Math.PI/180,r=e[a].lng*Math.PI/180,l=Math.cos(i)*Math.cos(r),s=Math.cos(i)*Math.sin(r),c=Math.sin(i);t+=l,o+=s,n+=c}return t/=a,o/=a,n/=a,r=Math.atan2(o,t),a=Math.sqrt(t*t+o*o),{lat:180*(i=Math.atan2(n,a))/Math.PI,lng:180*r/Math.PI}}(e),isNaN(e.lat)||isNaN(e.lng)?new google.maps.Map(document.getElementById("show_map"),{center:{lat:parseFloat(n),lng:parseFloat(i)},zoom:o,gestureHandling:"cooperative"}):new google.maps.Map(document.getElementById("show_map"),{center:{lat:parseFloat(e.lat),lng:parseFloat(e.lng)},zoom:o,gestureHandling:"cooperative"}));var f=new google.maps.InfoWindow,h=new OverlappingMarkerSpiderfier(u,{markersWontMove:!0,markersWontHide:!0,basicFormatEvents:!0});a.map(function(a,e){var t=parseFloat(a.lat),o=parseFloat(a.lng),n=a.average_rating,i=Math.floor(n),r=5-Math.ceil(n),l=a.number_comment,s="";if(0<i)for(var c=1;c<=i;c++)s+='<i class="fa fa-star"></i>';if(i!=Math.ceil(n)&&(s+='<i class="fa fa-star-half-alt"></i>'),0<r)for(var d=1;d<=r;d++)s+='<i class="fa fa-star-o"></i>';var _="";0!=l&&(_+='<span class="number second_font">('+a.number_comment+")</span>");var p,m='<div class="data_product_map"><a href="'+a.link+'"><img style="max-width: 100%; width: 280px;" src="'+a.thumbnail+'" ><h2 class="title"><a href="'+a.link+'">'+a.title+"</a></h2>"+a.price+'<div class="product_ratting"><span class="star">'+(s=!n||0==n?"":s)+"</span> "+_+" </div></a></div>",o=new google.maps.LatLng(t,o);"icon"==v&&(p=new google.maps.Marker({position:o,icon:b})),google.maps.event.addListener(p,"spider_click",function(a){f.setContent(m),f.open(u,p)}),h.addMarker(p)});window.map=u,window.oms=h}function r(){var t=M(document).find(".wrap_search_map"),a=t.find('[name="ovabrw_name_product"]').val(),e=t.find('[name="cat"]').val(),o=t.find('[name="sort"]').val(),n=t.find('[name="radius"]').val(),i=t.find('[name="map_lat"]').val(),r=t.find('[name="map_lng"]').val(),l=t.find('[name="ovabrw_pickup_loc"]').val(),s=t.find('[name="ovabrw_dropoff_loc"]').val(),c=t.find('[name="ovabrw_pickup_date"]').val(),d=t.find('[name="ovabrw_pickoff_date"]').val(),_=t.find(".search_result").attr("data-card"),p=t.find(".search_result").attr("data-column"),m=t.find(".search_result").attr("data-order"),u=t.find(".search_result").attr("data-orderby"),f=t.find(".search_result").attr("data-per_page"),h=t.find(".ovabrw_pagination_ajax .current").attr("data-paged"),v=t.find('[name="ovabrw_attribute"]').val(),b=t.find('[name="ovabrw_attribute_value"]').val(),w=t.find('[name="ovabrw_tag_product"]').val(),g=t.find(".search_result");M(document).find(".wrap_search_map .wrap_load_more").show(),M(document).find(".wrap_search_map .ovabrw_product_archive").hide();var y={action:"ovabrw_search_map",name:a,cat:e,radius:n,map_lat:i,map_lng:r,pickup_loc:l,dropoff_loc:s,start_date:c,end_date:d,sort:o,card:_,column:p,order:m,orderby:u,per_page:f,paged:h,attribute:v,attr_value:b,tags:w},b=t.find('[name="data_taxonomy_custom"]').val();b&&(y.taxonomies=b,w=JSON.parse(b),M.each(w,function(a,e){y[a]=t.find('[name="'+a+'_name"]').val()})),M.ajax({url:ajax_object.ajax_url,type:"POST",data:y,success:function(a){var e;a&&(e=JSON.parse(a),a=M(e.result).fadeOut(300).fadeIn(500),g.html(a),M(document).find(".wrap_search_filter_title .results_found").html(e.results_found),M(document).find(".wrap_search_map .wrap_load_more").hide(),"undefined"!=typeof google&&0<M("#show_map").length&&k(),D.ova_slide_image())}})}function l(){var a=document.getElementById("pac-input"),t="";""!==(t=a?new google.maps.places.Autocomplete(a):t)&&t.addListener("place_changed",function(){var a,e=t.getPlace();e.geometry&&(M("#show_map").length&&new google.maps.Map(document.getElementById("show_map"),{center:{lat:parseFloat(e.geometry.location.lat()),lng:parseFloat(e.geometry.location.lng())},zoom:o,gestureHandling:"cooperative"}),M("#map_name").val(e.name),M("#map_address").val(e.formatted_address),M("#map_lat").val(e.geometry.location.lat()),M("#map_lng").val(e.geometry.location.lng()),(a={}).lat=e.geometry.location.lat(),a.lng=e.geometry.location.lng(),M(document).find(".wrap_search_map .wrap_load_more").show(),M(document).find(".wrap_search_map .wrap_search_radius").show(),M(document).find(".wrap_search_map .ovabrw_product_archive").hide(),r())})}M("#pac-input").length&&l(),0<M(".wrap_search_map .show_taxonomy").length&&("yes"==M(".wrap_search_map .show_taxonomy").attr("data-show_taxonomy")?M(".wrap_search_map .wrap_search_taxonomies").hide():M(".wrap_search_map .wrap_search_taxonomies").show()),M.fn.event_map=function(a){var e;a=M.extend({lat:n,lng:i,zoom:o},a),M("#pac-input").length&&(e=[],M(".data_product").each(function(){e.push(JSON.parse(JSON.stringify({title:M(this).attr("data-title_product"),thumbnail:M(this).attr("data-thumbnail_product"),average_rating:M(this).attr("data-average_rating"),number_comment:M(this).attr("data-number_comment"),lat:M(this).attr("data-map_lat_product"),lng:M(this).attr("data-map_lng_product"),link:M(this).attr("data-link_product")})))}),"undefined"!=typeof google&&0<M("#show_map").length&&(k(),l()))},"undefined"!=typeof google&&0<M("#show_map").length&&(c=parseFloat(M("input#map_lat").val()?M("input#map_lat").val():n),d=parseFloat(M("input#map_lng").val()?M("input#map_lng").val():i),s=M(window).height(),M("#show_map").css("height",s),navigator.geolocation&&navigator.geolocation.getCurrentPosition(p),M("#show_map").event_map({lat:c,lng:d,zoom:o})),M('.wrap_search_map [name="ovabrw_name_product"]').on("change",function(a){r()}),M('.wrap_search_map [name="cat"]').on("change",function(a){"yes"==M(".wrap_search_map .show_taxonomy").attr("data-show_taxonomy")?M(".wrap_search_map .wrap_search_taxonomies").hide():M(".wrap_search_map .wrap_search_taxonomies").show(),u(M(".wrap_search_map"),M(this).val()),r()}),M('.wrap_search_map [name="ovabrw_pickup_loc"], .wrap_search_map [name="ovabrw_dropoff_loc"]').on("change",function(a){r()}),M('.wrap_search_map [name="ovabrw_pickup_date"], .wrap_search_map [name="ovabrw_pickoff_date"]').on("change",function(a){r()}),M('.wrap_search_map [name="ovabrw_attribute"], .wrap_search_map [name="ovabrw_attribute_value"]').on("change",function(a){r()}),M('.wrap_search_map [name="ovabrw_tag_product"]').on("change",function(a){r()});var a=M('.wrap_search_map [name="data_taxonomy_custom"]').val();a&&(_=JSON.parse(a),M.each(_,function(a,e){M('.wrap_search_map [name="'+a+'_name"]').on("change",function(a){r()})})),M('.wrap_search_map [name="sort"]').on("change",function(a){r()});var e=0,s=100,c=50,d=parseInt(M(document).find(".wrap_search_map .wrap_search_radius").attr("data-map_range_radius")),a=parseInt(M(document).find(".wrap_search_map .wrap_search_radius").attr("data-map_range_radius_min")),_=parseInt(M(document).find(".wrap_search_map .wrap_search_radius").attr("data-map_range_radius_max"));function p(a){var e=a.coords.latitude,a=a.coords.longitude;M('[name="map_lat"]').attr("value",e),M('[name="map_lng"]').attr("value",a);a={lat:parseFloat(e),lng:parseFloat(a)};(new google.maps.Geocoder).geocode({location:a},function(a,e){"OK"===e?a[0]?(M('.wrap_search_map [name="map_address"]').val(a[0].formatted_address),M(document).find(".wrap_search_map .wrap_search_radius").show()):(window.alert("No results found"),M(document).find(".wrap_search_map .wrap_search_radius").hide()):(M(document).find(".wrap_search_map .wrap_search_radius").hide(),window.alert("Geocoder failed due to: "+e))}),r()}function m(){M(window).width()<1024?M(document).find(".wrap_search_map #show_map").css({height:"100%",width:"100%","min-height":"600px"}):M(document).find(".wrap_search_map #show_map").css({height:M(window).height(),width:"100%"})}void 0!==a&&(e=a),void 0!==_&&(s=_),void 0!==d&&(c=d),0<M("#wrap_pointer").length?M("#wrap_pointer").slider({min:e,max:s,step:1,value:c,change:function(a,e){M(this).parents(".wrap_search_map").find('[name="radius"]').val(e.value),M(this).parents(".wrap_search_map").find(".result_radius").html(e.value+"km"),r()}}):r(),M(document).on("click",".wrap_search_map .ovabrw_pagination_ajax .page-numbers",function(a){a.preventDefault();a=M(this);M(".wrap_search_map .ovabrw_pagination_ajax .current").attr("data-paged")!=a.attr("data-paged")&&(M(window).scrollTop(0),M(".wrap_search_map .ovabrw_pagination_ajax .page-numbers").removeClass("current"),a.addClass("current"),r())}),M(document).on("click",".wrap_search_map .locate_me",function(){navigator.geolocation?navigator.geolocation.getCurrentPosition(p):x.innerHTML="Geolocation is not supported by this browser."}),M(".wrap_search_map .toggle_filters").off().on("click",function(){M(this).parents(".wrap_search_map").find(".form_search_map").slideToggle(300),M(this).find(".icon_down").toggle(300),M(this).find(".icon_up").toggle(300),M(this).toggleClass("active")}),M(".elementor_search_map .toggle_wrap span").on("click",function(){var a=M(this).attr("data-value");M(".wrap_search_map .wrap_search, .wrap_search_map .wrap_map").hide(),M("."+a).show(),M(".elementor_search_map .toggle_wrap span").removeClass("active"),M(this).addClass("active")}),m(),M(window).resize(function(){1024<=M(window).width()&&(M(document).find(".wrap_search_map .wrap_search").show(),M(document).find(".wrap_search_map .wrap_map").show()),m()}),M("#show_map").parents().filter(function(){"hidden"!=M(this).css("overflow")&&"hidden auto"!=M(this).css("overflow")||M(this).css("overflow","visible")})},ova_taxi_location:function(){var a=M(document).find('input[name="ovabrw-data-location"]'),o=a.data("waypoint-text"),n=a.data("max-waypoint"),i=0,r=[],l={fields:["formatted_address","geometry"]},e=a.data("map-types"),t=a.data("bounds"),s=a.data("bounds-lat"),c=a.data("bounds-lng"),d=a.data("bounds-radius"),a=a.data("restrictions");function _(a){let e="",t=0;for(var o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n=o.length;t<a;)e+=o.charAt(Math.floor(Math.random()*n)),t+=1;return e}function p(){M(document).find(".btn-remove-waypoint").off().on("click",function(){n&&--i<n&&(M(document).find(".form-location-field .btn-add-waypoint").show(),M(document).find("body.rtl.ovabrw-modern").length?M(document).find(".form-location-field .btn-remove-waypoint").css("left","45px"):M(document).find(".form-location-field .btn-remove-waypoint").css("right","45px")),M(this).closest(".form-location-field").remove(),u()})}function m(){"undefined"!=typeof google&&M(document).find('input[name="ovabrw_waypoint_address[]"]').each(function(){var t=M(this),a=t.attr("id"),a=document.getElementById(a),o=new google.maps.places.Autocomplete(a,l);o.addListener("place_changed",function(){var a=o.getPlace(),e=a.formatted_address,e={lat:a.geometry.location.lat(),lng:a.geometry.location.lng(),formatted_address:e};t.closest(".form-location-field").find('input[name="ovabrw_waypoint_data[]"]').val(JSON.stringify(e)),u()})})}function u(){if("undefined"!=typeof google){var l=M("#booking_form .ovabrw-directions"),a=M('#booking_form input[name="ovabrw-data-location"]').data("lat"),e=M('#booking_form input[name="ovabrw-data-location"]').data("lng"),s=M('#booking_form input[name="ovabrw-data-location"]').data("zoom"),c=M('#booking_form input[name="ovabrw_origin"]').val(),d=M('#booking_form input[name="ovabrw_destination"]').val(),_=M('#booking_form select[name="ovabrw_extra_time"]').val(),p=[],_=_||0;if(M('#booking_form input[name="ovabrw_waypoint_data[]"]').each(function(){p.push({location:M(this).val(),stopover:!0})}),c&&d){l.css("display","block");let t=0,o=0,n,i,r;const m=new google.maps.DirectionsService,u=new google.maps.DirectionsRenderer;e=new google.maps.Map(document.getElementById("ovabrw_map"),{zoom:s,center:{lat:a,lng:e}});u.setMap(e),m.route({origin:c,destination:d,waypoints:p,optimizeWaypoints:!0,travelMode:google.maps.TravelMode.DRIVING}).then(a=>{u.setDirections(a);var e=a.routes[0];for(let a=0;a<e.legs.length;a++)t+=e.legs[a].distance.value,o+=e.legs[a].duration.value;t=t||0,o=o||0,M('#booking_form input[name="ovabrw-distance"]').val(t),M('#booking_form input[name="ovabrw-duration-map"]').val(o),n=parseFloat(3600*_)+parseInt(o),M('#booking_form input[name="ovabrw-duration"]').val(n),i=parseInt(n/3600),r=Math.round(n%3600/60),l.find(".distance-value").html("").append((t/1e3).toFixed(2)),l.find(".hour").html("").append(i),l.find(".minute").html("").append(r),D.ova_ajax_show_total_after_load(M("#booking_form"))}).catch(a=>window.alert("Directions request failed!"))}else l.hide()}}e&&(l.types=e),"on"==t&&s&&c&&d&&(g=new google.maps.Circle({center:new google.maps.LatLng(s,c),radius:d}),l.bounds=g.getBounds(),l.strictBounds=!0),a&&M.isArray(a)&&(l.componentRestrictions={country:a}),function t(){M(document).find(".btn-add-waypoint").off().on("click",function(){if(n&&i==n)return!1;for(var a=_(16);-1!==M.inArray(a,r);)a=_(16);var e='<div class="rental_item form-location-field">';e+="<label>"+o+"</label>",e+='<input type="text" id="ovabrw_waypoint_loc_'+a+'" name="ovabrw_waypoint_address[]" autocomplete="off">',e+='<input type="hidden" name="ovabrw_waypoint_data[]" value="">',e+='<i aria-hidden="true" class="flaticon-substract btn-remove-waypoint"></i>',e+='<i aria-hidden="true" class="flaticon-add btn-add-waypoint"></i>',e+="</div>",M(this).closest(".form-location-field").after(e),n&&(i+=1)==n&&(M(document).find(".form-location-field .btn-add-waypoint").hide(),M(document).find("body.rtl.ovabrw-modern").length?M(document).find(".form-location-field .btn-remove-waypoint").css("left","13px"):M(document).find(".form-location-field .btn-remove-waypoint").css("right","13px")),t(),p(),m()})}(),p(),function(){if("undefined"!=typeof google&&M("#ovabrw_pickup_loc").length&&M("#ovabrw_pickoff_loc").length){var a=document.getElementById("ovabrw_pickup_loc"),e=document.getElementById("ovabrw_pickoff_loc");const t=new google.maps.places.Autocomplete(a,l);t.addListener("place_changed",function(){var a=t.getPlace(),e=a.formatted_address,e={lat:a.geometry.location.lat(),lng:a.geometry.location.lng(),formatted_address:e};M(document).find('input[name="ovabrw_origin"]').val(JSON.stringify(e)),M(document).find('input[name="ovabrw_pickoff_loc"]').focus(),u()});const o=new google.maps.places.Autocomplete(e,l);o.addListener("place_changed",function(){var a=o.getPlace(),e=a.formatted_address,e={lat:a.geometry.location.lat(),lng:a.geometry.location.lng(),formatted_address:e};M(document).find('input[name="ovabrw_destination"]').val(JSON.stringify(e)),u()})}}(),M('#booking_form select[name="ovabrw_extra_time"]').on("change",function(){var a=(a=M(this).val())||0,e=(e=M('#booking_form input[name="ovabrw-duration-map"]').val())||0,t=parseFloat(3600*a)+parseInt(e),a=parseInt(t/3600),e=Math.round(t%3600/60);M('#booking_form input[name="ovabrw-duration"]').val(t),M("#booking_form .ovabrw-directions .hour").html("").append(a),M("#booking_form .ovabrw-directions .minute").html("").append(e),D.ova_ajax_show_total_after_load(M("#booking_form"))});var t=M(document).find('input[name="ovabrw-req-data-location"]'),f=t.data("waypoint-text"),h=t.data("max-waypoint"),v=0,b=[],w={fields:["formatted_address","geometry"]},s=t.data("map-types"),c=t.data("bounds"),d=t.data("bounds-lat"),g=t.data("bounds-lng"),a=t.data("bounds-radius"),t=t.data("restrictions");function y(){M(document).find(".btn-req-remove-waypoint").off().on("click",function(){h&&--v<h&&(M(document).find(".form-location-field .btn-req-add-waypoint").show(),M(document).find("body.rtl.ovabrw-modern").length?M(document).find(".form-location-field .btn-req-remove-waypoint").css("left","45px"):M(document).find(".form-location-field .btn-req-remove-waypoint").css("right","45px")),M(this).closest(".form-location-field").remove(),x()})}function k(){"undefined"!=typeof google&&M(document).find('input[name="ovabrw_req_waypoint_address[]"]').each(function(){var t=M(this),a=t.attr("id"),a=document.getElementById(a),o=new google.maps.places.Autocomplete(a,l);o.addListener("place_changed",function(){var a=o.getPlace(),e=a.formatted_address,e={lat:a.geometry.location.lat(),lng:a.geometry.location.lng(),formatted_address:e};t.closest(".form-location-field").find('input[name="ovabrw_req_waypoint_data[]"]').val(JSON.stringify(e)),u()})})}function x(){if("undefined"!=typeof google){var l=M("#request_booking .ovabrw-req-directions"),a=M('#request_booking input[name="ovabrw-req-data-location"]').data("lat"),e=M('#request_booking input[name="ovabrw-req-data-location"]').data("lng"),s=M('#request_booking input[name="ovabrw-req-data-location"]').data("zoom"),c=M('#request_booking input[name="ovabrw_req_origin"]').val(),d=M('#request_booking input[name="ovabrw_req_destination"]').val(),_=M('#request_booking select[name="ovabrw_req_extra_time"]').val(),p=[],_=_||0;if(M('#request_booking input[name="ovabrw_req_waypoint_data[]"]').each(function(){p.push({location:M(this).val(),stopover:!0})}),c&&d){l.css("display","block");let t=0,o=0,n,i,r;const m=new google.maps.DirectionsService,u=new google.maps.DirectionsRenderer;e=new google.maps.Map(document.getElementById("ovabrw_req_map"),{zoom:s,center:{lat:a,lng:e}});u.setMap(e),m.route({origin:c,destination:d,waypoints:p,optimizeWaypoints:!0,travelMode:google.maps.TravelMode.DRIVING}).then(a=>{u.setDirections(a);var e=a.routes[0];for(let a=0;a<e.legs.length;a++)t+=e.legs[a].distance.value,o+=e.legs[a].duration.value;t=t||0,o=o||0,M('#request_booking input[name="ovabrw-req-distance"]').val(t),M('#request_booking input[name="ovabrw-req-duration-map"]').val(o),n=parseFloat(3600*_)+parseInt(o),M('#request_booking input[name="ovabrw-req-duration"]').val(n),i=parseInt(n/3600),r=Math.round(n%3600/60),l.find(".distance-value").html("").append((t/1e3).toFixed(2)),l.find(".hour").html("").append(i),l.find(".minute").html("").append(r)}).catch(a=>window.alert("Directions request failed!"))}else l.hide()}}s&&(w.types=s),"on"==c&&d&&g&&a&&(a=new google.maps.Circle({center:new google.maps.LatLng(d,g),radius:a}),w.bounds=a.getBounds(),w.strictBounds=!0),t&&M.isArray(t)&&(w.componentRestrictions={country:t}),function t(){M(document).find(".btn-req-add-waypoint").off().on("click",function(){if(h&&v==h)return!1;for(var a=_(16);-1!==M.inArray(a,b);)a=_(16);var e='<div class="rental_item form-location-field">';e+="<label>"+f+"</label>",e+='<input type="text" id="ovabrw_req_waypoint_loc_'+a+'" name="ovabrw_req_waypoint_address[]" autocomplete="off">',e+='<input type="hidden" name="ovabrw_req_waypoint_data[]" value="">',e+='<i aria-hidden="true" class="flaticon-substract btn-req-remove-waypoint"></i>',e+='<i aria-hidden="true" class="flaticon-add btn-req-add-waypoint"></i>',e+="</div>",M(this).closest(".form-location-field").after(e),h&&(v+=1)==h&&(M(document).find(".form-location-field .btn-req-add-waypoint").hide(),M(document).find("body.rtl.ovabrw-modern").length?M(document).find(".form-location-field .btn-req-remove-waypoint").css("left","13px"):M(document).find(".form-location-field .btn-req-remove-waypoint").css("right","13px")),t(),y(),k()})}(),y(),function(){if("undefined"!=typeof google&&M("ovabrw_req_pickup_loc").length&&M("ovabrw_req_pickoff_loc").length){var a=document.getElementById("ovabrw_req_pickup_loc"),e=document.getElementById("ovabrw_req_pickoff_loc");const t=new google.maps.places.Autocomplete(a,w);t.addListener("place_changed",function(){var a=t.getPlace(),e=a.formatted_address,e={lat:a.geometry.location.lat(),lng:a.geometry.location.lng(),formatted_address:e};M(document).find('input[name="ovabrw_req_origin"]').val(JSON.stringify(e)),M(document).find('input[name="ovabrw_req_pickoff_loc"]').focus(),x()});const o=new google.maps.places.Autocomplete(e,w);o.addListener("place_changed",function(){var a=o.getPlace(),e=a.formatted_address,e={lat:a.geometry.location.lat(),lng:a.geometry.location.lng(),formatted_address:e};M(document).find('input[name="ovabrw_req_destination"]').val(JSON.stringify(e)),x()})}}(),M('#request_booking select[name="ovabrw_req_extra_time"]').on("change",function(){var a=(a=M(this).val())||0,e=(e=M('#request_booking input[name="ovabrw-req-duration-map"]').val())||0,t=parseFloat(3600*a)+parseInt(e),a=parseInt(t/3600),e=Math.round(t%3600/60);M('#request_booking input[name="ovabrw-req-duration"]').val(t),M("#request_booking .ovabrw-req-directions .hour").html("").append(a),M("#request_booking .ovabrw-req-directions .minute").html("").append(e)})},ova_slide_image:function(){M(".ovabrw-gallery-popup .ovabrw-gallery-slideshow").each(function(){var a=M(this),e=a.data("options")?a.data("options"):{};a.owlCarousel({autoWidth:e.autoWidth,margin:e.margin,items:e.items,loop:e.loop,autoplay:e.autoplay,autoplayTimeout:e.autoplayTimeout,center:e.center,lazyLoad:e.lazyLoad,nav:e.nav,dots:e.dots,autoplayHoverPause:e.autoplayHoverPause,slideBy:e.slideBy,smartSpeed:e.smartSpeed,rtl:e.rtl,navText:['<i aria-hidden="true" class="'+e.nav_left+'"></i>','<i aria-hidden="true" class="'+e.nav_right+'"></i>'],responsive:e.responsive}),a.find(".gallery-fancybox").off("click").on("click",function(){var a=M(this).data("index"),e=M(this).closest(".ovabrw-gallery-popup").find(".ovabrw-data-gallery").data("gallery");Fancybox.show(e,{Image:{Panzoom:{zoomFriction:.7,maxScale:function(){return 3}}},startIndex:a})})}),M(".ovabrw-product-images .product-gallery").each(function(){var a=M(this),e=a.data("options")?a.data("options"):{},t={0:{items:2,slideBy:1},768:{items:3,slideBy:1},1024:{items:e.items,slideBy:e.slideBy}};a.owlCarousel({items:e.items,slideBy:e.slideBy,margin:e.margin,autoplayHoverPause:e.autoplayHoverPause,loop:e.loop,autoplay:e.autoplay,autoplayTimeout:e.autoplayTimeout,smartSpeed:e.smartSpeed,rtl:e.rtl,nav:!1,dots:!1,responsive:t}),M(".ovabrw-product-images .gallery-fancybox").off("click").on("click",function(){var a=M(this),e=a.data("index"),a=a.closest(".ovabrw-product-images").find(".data-gallery").data("gallery");Fancybox.show(a,{Image:{Panzoom:{zoomFriction:.7,maxScale:function(){return 3}}},startIndex:e})})})},ova_modern_product:function(){function a(a){a&&(a.val()?a.css("color",ovabrwTextColor):a.css("color",ovabrwLightColor))}"undefined"!=typeof ovabrwLightColor&&"undefined"!=typeof ovabrwTextColor&&M(document).find(".ovabrw-modern-product select, .ovabrw-search-modern select, .ovabrw_wd_search select").each(function(){a(M(this)),M(this).on("change",function(){a(M(this))})}),M(".ovabrw-product-form-tabs .ovabrw-tab-head .item-tab").on("click",function(a){a.preventDefault(),M(this).hasClass("active")||(M(this).closest(".ovabrw-tab-head").find(".item-tab").removeClass("active"),M(this).addClass("active"),a=M(this).data("id"),M(this).closest(".ovabrw-product-form-tabs").find(".item-content").removeClass("active"),M(this).closest(".ovabrw-product-form-tabs").find("#"+a).addClass("active"))})}};function u(o,a){"undefined"!=typeof ova_brw_search_show_tax_depend_cat&&o.length&&("yes"==ova_brw_search_show_tax_depend_cat?o.find(".s_field_cus_tax").hide():o.find(".s_field_cus_tax").show()),a&&M.ajax({url:ajax_object.ajax_url,type:"POST",data:{action:"ovabrw_get_tax_in_cat",cat_val:a},success:function(a){if(a){var e=a.split(",");if(e.length)for(var t=0;t<e.length;t++)0<o.find("."+e[t]).length&&o.find("."+e[t]).show()}}})}function a(){var b="";"undefined"!=typeof brw_date_format&&(b=brw_date_format),M(".wrap_calendar").each(function(a){M(this).data("id");var e,t,o,n,s,i,c,d,m,u,f,h,r,_,l,v=M(this).find(".ovabrw__product_calendar")[0];function p(){M(document).find(".wrap_calendar .fc-bg-event.fc-event").each(function(){M(this).closest(".fc-daygrid-day-frame").find(".fc-daygrid-day-number").css("color","#FFF"),M(this).closest(".fc-daygrid-day-frame").find(".fc-daygrid-day-bg").css("color","#FFF")})}null!==v&&(e=v.getAttribute("data-nav"),t=v.getAttribute("data-default_view"),o=v.getAttribute("data-first-day")||0,"month"==t&&(t="dayGridMonth"),n=v.getAttribute("data-lang").replace(/\s/g,""),s=v.getAttribute("data-define_day"),i=parseInt(v.getAttribute("data_event_number")),c=v.getAttribute("default_hour_start"),d=v.getAttribute("time_to_book_start"),d=D.ova_get_time_to_book_start(d),l=(l=v.getAttribute("price_calendar")).replace(/[\u0000-\u001F]+/g,""),m=JSON.parse(l),r=v.getAttribute("data-special-time"),u=JSON.parse(r),f=v.getAttribute("data-background-day"),l=v.getAttribute("data-disable_week_day"),h="",l&&(h=JSON.parse(l)),r="",_=[],void 0!==(r=(l=v.getAttribute("order_time"))&&0<l.length?JSON.parse(l):r)&&0<r.length&&r.forEach(function(a,e){a.hasOwnProperty("rendering")&&_.push(a.start)}),new FullCalendar.Calendar(v,{editable:!1,events:r,firstDay:o,height:"auto",headerToolbar:{left:"prev,next,today,"+e,right:"title"},initialView:t,locale:n,dayMaxEventRows:!0,views:{dayGrid:{dayMaxEventRows:i},timeGrid:{dayMaxEventRows:i},week:{dayMaxEventRows:i},day:{dayMaxEventRows:i}},dayCellDidMount:function(o){var a,n=new Date(o.date),i=Date.UTC(n.getFullYear(),n.getMonth(),n.getDate())/1e3;if(""!=m){if("day"==(a=m[0].type_price)){var e=m[1].ovabrw_daily_monday,r=m[1].ovabrw_daily_tuesday,l=m[1].ovabrw_daily_wednesday,s=m[1].ovabrw_daily_thursday,c=m[1].ovabrw_daily_friday,d=m[1].ovabrw_daily_saturday,_=m[1].ovabrw_daily_sunday;switch(n.getDay()){case 0:{h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=_,M.each(u,function(a,e){i>=e[0]&&i<=e[1]&&(t.innerHTML=a)})):t.innerHTML=_,o;break}case 1:{h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=e,M.each(u,function(a,e){i>=e[0]&&i<=e[1]&&(t.innerHTML=a)})):t.innerHTML=e,o;break}case 2:{h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=r,M.each(u,function(a,e){i>=e[0]&&i<=e[1]&&(t.innerHTML=a)})):t.innerHTML=r,o;break}case 3:{h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=l,M.each(u,function(a,e){i>=e[0]&&i<=e[1]&&(t.innerHTML=a)})):t.innerHTML=l,o;break}case 4:{h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=s,M.each(u,function(a,e){i>=e[0]&&i<=e[1]&&(t.innerHTML=a)})):t.innerHTML=s,o;break}case 5:{h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=c,M.each(u,function(a,e){if(i>=e[0]&&i<=e[1])return t.innerHTML=a,o})):t.innerHTML=c,o;break}case 6:{h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=d,M.each(u,function(a,e){i>=e[0]&&i<=e[1]&&(t.innerHTML=a)})):t.innerHTML=d,o;break}}}else if("hour"==a){h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});var p=m[1].ovabrw_price_hour;let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=p,M.each(u,function(a,e){i>=e[0]&&i<=e[1]&&(t.innerHTML=a)})):t.innerHTML=p,o}else if("mixed"==a){e=m[1].ovabrw_daily_monday,r=m[1].ovabrw_daily_tuesday,l=m[1].ovabrw_daily_wednesday,s=m[1].ovabrw_daily_thursday,c=m[1].ovabrw_daily_friday,d=m[1].ovabrw_daily_saturday,_=m[1].ovabrw_daily_sunday;switch(n.getDay()){case 0:{h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=_,M.each(u,function(a,e){i>=e[0]&&i<=e[1]&&(t.innerHTML=a)})):t.innerHTML=_,o;break}case 1:{h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=e,M.each(u,function(a,e){i>=e[0]&&i<=e[1]&&(t.innerHTML=a)})):t.innerHTML=e,o;break}case 2:{h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=r,M.each(u,function(a,e){i>=e[0]&&i<=e[1]&&(t.innerHTML=a)})):t.innerHTML=r,o;break}case 3:{h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=l,M.each(u,function(a,e){i>=e[0]&&i<=e[1]&&(t.innerHTML=a)})):t.innerHTML=l,o;break}case 4:{h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=s,M.each(u,function(a,e){i>=e[0]&&i<=e[1]&&(t.innerHTML=a)})):t.innerHTML=s,o;break}case 5:{h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=c,M.each(u,function(a,e){if(i>=e[0]&&i<=e[1])return t.innerHTML=a,o})):t.innerHTML=c,o;break}case 6:{h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=d,M.each(u,function(a,e){i>=e[0]&&i<=e[1]&&(t.innerHTML=a)})):t.innerHTML=d,o;break}}}else if("taxi"==a){h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))});p=m[1].ovabrw_price_taxi;let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return u?(t.innerHTML=p,M.each(u,function(a,e){i>=e[0]&&i<=e[1]&&(t.innerHTML=a)})):t.innerHTML=p,o}}else if("period_time"==(a=v.getAttribute("type_price"))||"transportation"==a)return h&&M.each(h,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",M(".unavailable_date").css("background-color",f))}),o},dateClick:function(a){var e=v.getAttribute("type_price"),t=new Date(a.date),o=t.getFullYear(),n=(n=t.getMonth()+1)<10?"0"+n:n,i=(i=t.getDate())<10?"0"+i:i,r=new Date,l=new Date(o,n-1,i,24,0),a=o+"-"+n+"-"+i;("hotel"==s||"taxi"==e||M('.rental_item input[name="ovabrw_pickup_date"]').hasClass("no_time_picker")||d.length<1)&&(c=""),h&&M.each(h,function(a,e){if(e==t.getDay())return alert(notifi_disable_day),l=0,!1}),!_.includes(a)&&r<=l&&(r=(r=(r=(r=b).replace("Y",o)).replace("m",n)).replace("d",i),c?M('input[name="ovabrw_pickup_date"]').val(r+" "+c):M('input[name="ovabrw_pickup_date"]').val(r),document.getElementById("booking_form")&&(document.getElementById("booking_form").scrollIntoView({behavior:"smooth"}),M(".startdate_perido_time").each(function(){var a=M(this);a.val()&&D.ova_ajax_load_packages(a)})))}}).render(),p(),M(this).find(".fc-button-group button.fc-button").on("click",function(){p()}))})}M(document).ready(function(){D.init()}),document.addEventListener("DOMContentLoaded",function(){a()}),window.BrwFrontendJS=D,window.BrwCalendar=a}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,